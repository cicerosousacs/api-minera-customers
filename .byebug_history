exit
(self.forgot_password_sent_at + 30.minutes )
Time.now
Time.now > (self.forgot_password_sent_at + 30.minutes )
Time.now.utc
(self.forgot_password_sent_at + 30.minutes ) > Time.now.utc
(self.forgot_password_sent_at + 30.minutes ) > Time.new
Time.new
Time
(self.forgot_password_sent_at + 30.minutes )
(self.forgot_password_sent_at + 30.minutes ) > Time.now
Date.now
Date.new.now
Date.new
Date
Daet
(self.forgot_password_sent_at + 30.minutes ) > Date
(self.forgot_password_sent_at + 30.minutes ) > Date.now
(self.forgot_password_sent_at + 30.minutes ) > Time.now
Time.now
Time.now.utc
self.forgot_password_sent_at + 30.minutes
self.forgot_password_sent_at
exit
decoded_token[0]['customer_id']
decoded_token[0]
decoded_token
decoded_token['customer_id']
decoded_token[:customer_id]
decoded_token = decode_token(params[:token])
params[:token]
params
c
params
c
params
c
token
email
nome
c
args
args.second
args.first
c
exit
forgot_password_token = generate_token
self.forgot_password_token = generate_token
c
generate_token
c
customer = find_by(email: email)
email.blank?
c
forgot_password_params[:email]
forgot_password_params[:email
c
params
forgot_password_params[:email]
forgot_password_params
c
Customer.validation_ganarate_token(forgot_password_params[:email])
forgot_password_params[:email]
forgot_password_params
c
update_params
c
update_params
c
params
c
search_params
c
search_params
exit
search_params
exit
params
search_params
c
search_params
c
search_params[:type]
params = remove_undefine_params(search_params)
search_params
params
search_params
exit
c
params[key] == nil
params[key] == "nil"
params[key] == "null"
params[key]
params[key] == "undefined"
params[key] == "null" ? '' : params[key]
params[key] == "undefined" || params[key] == "null" ? '' : params[key]
params[key] == "null"
key
params[key]
params[key] == "undefined"
key
c
key
c
key
c
key
c
params
c
exit
@customer.authenticate(params[:current_password])
params[:customer_type] == 'Custumer'
params[:customer_type]
params
params[:current_password]
c
@customer.authenticate(params[:current_password])
params[:current_password]
c
@customer.authenticate(@customer.password_digest)
@customer.password
@customer.password_digest == params[:currentPassword]
@customer.password_digest == @customer.password_digest
params[:currentPassword]
@customer.password_digest
@customer
c
@customer.authenticate("w")
@customer.authenticate("123456@M")
@customer.authenticate
@customer.authenticate("123456@M")
@customer.authenticate("123456@m")
@customer.authenticate(123456@M)
@customer.authenticate("123456@M")
@customer
params[:currentPassword]
params[:current_password]
params
c
@customer.authenticate(params[:currentPassword])
params[:currentPassword]
@customer.authenticate(params[:currentPassword])
params
params[:current_password]
@customer.authenticate(params[:current_password])
c
params[:customer_type]
params
params[:type]
c
companies_by_customer.quantity_company_remaining
companies_by_customer = where(customer_id: customer_user.customer.id).first
companies_by_customer.where(customer_id: customer_user.customer.id).first
customer_user.customer.id
raise 'Cliente n√£o encontrado!' if customer_user.blank?
customer_user = CustomerUser.find(customer_id)
customer_id
c
CustomerUser.find(customer_id).customer.subscription.quantity_companies
CustomerUser.find(customer_id).customer.subscription
CustomerUser.find(customer_id).customer
CustomerUser.find(customer_id).customer.quantity_company
CustomerUser.find(customer_id).customer.id
CustomerUser.find(customer_id).customer
CustomerUser.find(customer_id)
type == 'Customer'
type
type.blank?
customer_id
customer_id.blank?
c
customer = Customer.find(params[:id])
c
dd.nil?
dd = Customer.find(params[:id])
Customer.find(params[:id])
Customer.find(params[:id]) || CustomerUser.find(params[:id])
Customer.find(params[:id]) ||= CustomerUser.find(params[:id])
Customer.find(params[:id]) || CustomerUser.find(params[:id])
CustomerUser.find(params[:id])
Customer.find(params[:id])
c
params[:id]
c
customer.customer.subscription.description
customer.subscription.description
customer.class.name
customer[:first_name] + ' ' + customer[:last_name]
customer[:id]
c
Session.new_session(customer)
customer
c
CustomerUser.find_by(email: email)
Customer.find_by(email: email)
email
exit
params
params[:id]
customer_user
exit
customer_user
params
exit
customer_user
   20:   def self.update_customer_user(customer_user, params)
params
c
params
@customer_user
exit
c
params[:id]
@customer_user = CustomerUser.find(params[:id])
c
CustomerUser.find(params[:id])
params[:id]
c
customer_user = CustomerUser.activar_desactivar(customer_user_status_params[:customer_user_id], customer_user_status_params[:status])
c
customer_user.save!
customer_user.active = status
customer_user = find(customer_user_id)
find(customer_user_id)
status
customer_user_id
c
@customer_user
params
c
params
c
customer.id
customer
c
customer[:id]
customer
c
customer['id']
customer[:id]
customer
c
command.result
c
result
customer
@result
result
customer['first_name']
customer
customer[:first_name]
c
Session.new_session(command)
command.success?
command
